generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VehicleType {
  ECONOMY
  PREMIUM
  LUXURY
}

enum RideStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DriverStatus {
  AVAILABLE
  UNAVAILABLE
  ON_RIDE
}

enum RideRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  TIMED_OUT
  CANCELLED
}

enum UserRoles {
  USER
  DRIVER
  ADMIN
}

enum RoleChangeRequestTypes {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  RIDE_REQUEST
  RIDE_ACCEPTED
  RIDE_COMPLETED
  PAYMENT_RECEIVED
  DRIVER_VERIFICATION
  SYSTEM_ALERT
  PROMOTIONAL
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  UPI
  WALLET
  BANK_TRANSFER
  CASH
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String
  phone_number String    @unique
  password     String
  role         String    @default("USER")
  isOnline     Boolean   @default(false)
  // Profile information
  profileImage String?
  dateOfBirth  DateTime?
  gender       String?

  // Verification fields
  isEmailVerified Boolean   @default(false)
  isPhoneVerified Boolean   @default(false)
  emailVerifiedAt DateTime?
  phoneVerifiedAt DateTime?

  // Location 
  location  String?
  curr_lat  Float?
  curr_long Float?

  // Security fields
  lastLoginAt       DateTime?
  failedLoginCount  Int       @default(0)
  lastFailedLoginAt DateTime?
  passwordChangedAt DateTime?

  // Temporary fields for verification
  emailVerificationToken String?
  phoneVerificationOtp   Int?
  otpExpiresAt           DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  Driver            Driver?
  RefreshToken      RefreshToken[]
  PasswordReset     PasswordReset[]
  ride              Ride[]
  RideRequest       RideRequest[]
  LoginAttempt      LoginAttempt[]
  RoleChangeRequest RoleChangeRequest[]
  Notifications     Notifications[]
  Wallet            Wallet?
  Payment           Payment[]

  @@index([id, phone_number])
  @@index([email])
  @@index([role])
}

model Driver {
  id           String @id @default(cuid())
  userId       String @unique
  phone_number String @unique
  rating       String @default("0")

  isActive     Boolean @default(true)
  driverStatus String  @default("AVAILABLE")

  // Location
  location  String?
  curr_lat  Float?
  curr_long Float?

  // Driver metrics
  total_rides     Int   @default(0)
  total_earnings  Float @default(0.0)
  total_distance  Float @default(0.0)
  total_time      Int   @default(0) // in minutes
  completion_rate Float @default(0.0)
  acceptance_rate Float @default(0.0)

  // Driver verification
  LicenseNumber String?
  LicenseImage  String?
  Proof         String?
  isVerified    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User          @relation(fields: [userId], references: [id])
  ride        Ride[]
  vehicle     Vehicle?
  RideRequest RideRequest[]

  @@index([driverStatus])
  @@index([curr_lat, curr_long])
  @@index([isVerified])
}

model Vehicle {
  id          String      @id @default(cuid())
  driverId    String      @unique
  vehicleType VehicleType

  company      String
  vehicleImage String
  model        String
  vehicleNo    String  @unique
  seatCapacity Int
  isActive     Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  driver Driver @relation(fields: [driverId], references: [id])
  rides  Ride[]

  @@index([isActive])
  @@index([driverId])
  @@index([vehicleType])
}

model Ride {
  id        String  @id @default(cuid())
  userId    String
  driverId  String
  vehicleId String? @unique

  // Location details
  pickupLocation     String
  pickupLatitude     Float
  pickupLongitude    Float
  destinationAddress String
  destinationLat     Float
  destinationLong    Float

  rideType VehicleType
  status   RideStatus  @default(PENDING)

  requestedAt DateTime  @default(now())
  acceptedAt  DateTime?
  pickupTime  DateTime?
  dropTime    DateTime?

  duration Float?

  // Distance and fare
  estimatedDistance Float // in km
  actualDistance    Float? // in km
  estimatedDuration String // in minutes
  actualDuration    String? // in minutes
  baseFare          Float
  distanceFare      Float  @default(0.0)
  timeFare          Float  @default(0.0)
  surgeFare         Float  @default(0.0)
  totalFare         Float

  // Trip details
  otp                String? // OTP for ride verification
  cancellationReason String?
  cancelledBy        String? // USER or DRIVER

  // Only ride owns the foreign key to RideRequest
  rideRequestId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id])
  driver      Driver       @relation(fields: [driverId], references: [id])
  vehicle     Vehicle?     @relation(fields: [vehicleId], references: [id])
  rideRequest RideRequest? @relation(fields: [rideRequestId], references: [id])
  Payment     Payment[]

  @@index([status])
  @@index([driverId, status])
  @@index([userId, status])
}

model RideRequest {
  id           String @id @default(cuid())
  userId       String
  driverId     String
  userLocation String
  destination  String

  baseFare     Float
  distanceFare Float @default(0.0)
  timeFare     Float @default(0.0)
  surgeFare    Float @default(0.0)
  totalFare    Float

  distance    Float
  vehicleType VehicleType
  status      RideRequestStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  user   User   @relation(fields: [userId], references: [id])
  driver Driver @relation(fields: [driverId], references: [id])
  ride   Ride?

  @@index([userId, status])
  @@index([driverId, status])
  @@index([createdAt])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  isUsed    Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model LoginAttempt {
  id            String   @id @default(cuid())
  userId        String? // Null for failed attempts with non-existent users
  email         String?
  phoneNumber   String?
  ipAddress     String
  userAgent     String?
  success       Boolean
  failureReason String?
  createdAt     DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, success, createdAt])
  @@index([ipAddress, createdAt])
  @@index([email, success, createdAt])
  @@index([phoneNumber, success, createdAt])
  @@map("login_attempts")
}

model RoleChangeRequest {
  id        String                 @id @default(cuid())
  userId    String
  newRole   UserRoles
  status    RoleChangeRequestTypes @default(PENDING)
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Notifications {
  id      String  @id @default(cuid())
  userId  String
  title   String
  message String
  isRead  Boolean @default(false)

  category String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
  @@index([createdAt])
}

model Wallet {
  id      String  @id @default(cuid())
  userId  String  @unique
  balance Decimal @default(0.0) @db.Decimal(10, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User                @relation(fields: [userId], references: [id])
  WalletTransaction WalletTransaction[]

  @@index([userId])
}

model WalletTransaction {
  id              String          @id @default(cuid())
  walletId        String
  amount          Decimal         @db.Decimal(10, 2)
  transactionType TransactionType // CREDIT or DEBIT
  description     String?

  // Security Audit  
  referenceId     String? @unique // External reference
  parentPaymentId String? // Link to payment if applicable
  balanceBefore   Decimal @db.Decimal(10, 2)
  balanceAfter    Decimal @db.Decimal(10, 2)

  createdAt DateTime @default(now())

  wallet  Wallet   @relation(fields: [walletId], references: [id])
  payment Payment? @relation(fields: [parentPaymentId], references: [id])

  @@index([walletId, createdAt])
  @@index([referenceId])
  @@index([transactionType, createdAt])
}

model Payment {
  id     String        @id @default(cuid())
  userId String
  rideId String
  amount Decimal       @default(100.0) @db.Decimal(10, 2)
  method PaymentMethod
  status PaymentStatus

  // Payment Gateway Integration
  gatewayTxnId    String? @unique // Payment gateway transaction ID
  gatewayResponse Json? // Gateway response data

  // Security & Audit
  failureReason String?
  refundAmount  Decimal?  @db.Decimal(10, 2)
  refundedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User                @relation(fields: [userId], references: [id])
  ride              Ride                @relation(fields: [rideId], references: [id])
  WalletTransaction WalletTransaction[]

  @@index([userId, status])
  @@index([rideId])
  @@index([gatewayTxnId])
  @@index([status, createdAt])
}
