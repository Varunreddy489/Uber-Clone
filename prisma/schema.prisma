generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VehicleType {
  ECONOMY
  PREMIUM
  LUXURY
}

enum RideStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  name         String
  phone_number String  @unique
  password     String
  role         String  @default("USER")
  isActive     Boolean @default(true)

  curr_longitude Float? @default(0)
  curr_latitude  Float? @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Driver    Driver?
  ride      ride[]
}

model Driver {
  id           String  @id @default(cuid())
  userId       String  @unique
  phone_number String  @unique
  rating       String  @default("0")
  isActive     Boolean @default(true)

  curr_longitude Float? @default(0)
  curr_latitude  Float? @default(0)

  total_rides    Int   @default(0)
  total_earnings Float @default(0)
  total_distance Float @default(0)
  total_time     Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id])
  ride    ride[]
  vehicle vehicle?
}

model vehicle {
  id           String      @id @default(cuid())
  driverId     String      @unique
  vehicleType  VehicleType
  vehicleNo    String      @unique
  seatCapacity Int
  isActive     Boolean     @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  driver Driver @relation(fields: [driverId], references: [id])
}

model ride {
  id       String @id @default(cuid())
  userId   String
  driverId String

  start_latitude  Float
  start_longitude Float

  end_latitude  Float
  end_longitude Float

  rideType VehicleType

  status RideStatus @default(PENDING)

  requestedAt DateTime  @default(now())
  acceptedAt  DateTime?
  pickupTime  DateTime
  dropTime    DateTime?

  distance Float
  duration Float
  fare     Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  driver Driver @relation(fields: [driverId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}
